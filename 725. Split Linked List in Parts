Problem Link : https://leetcode.com/problems/split-linked-list-in-parts/description/?envType=daily-question&envId=2024-09-08


class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        n = 0
        curr = head
        while curr:
            n += 1
            curr = curr.next
        
        part_size = n // k
        extra_nodes = n % k
        
        res = []
        curr = head
        for i in range(k):
            res.append(curr)

            for j in range(part_size - 1 + (1 if extra_nodes else 0)):
                if not curr: break 
                curr = curr.next 
                
            extra_nodes -= (1 if extra_nodes else 0)
            if curr:
                curr.next, curr = None, curr.next

        return res

''' time complexity : O(n)        
    space complexity : O(1)
'''
