    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        flag = True 
        q = [root]
        res = []
        while q :
            level = []
            n = len(q)
            for i in range(n) :
                node = q.pop(0)
                if node :
                    level.append(node.val)
                    q.append(node.left)
                    q.append(node.right)
            if level :
                if flag :
                    res.append(level)
                else :
                    res.append(level[::-1])
            flag = not flag
        return res


''' time complexity : O(n)
    space complexity : O(n)
'''

################################################################################################################################################################################



''' Time complexity O(n)
    space complexity O(n) '''
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        result = []
        q = [root]
        index = 0
        while q :
            lenght = len(q)
            level = []
            for i in range(lenght) :
                n = q.pop(0)
                if n :
                    level.append(n.val)
                    q.append(n.left)
                    q.append(n.right)
            if level :
                if index%2 == 0 :
                    result.append(level)
                else :
                    result.append(level[::-1])
            index += 1
        return result 
        
        
        
################################################################################################################################################################################        
        
        
        
# using a stack 
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        result = []
        q = [root]
        flag = False 
        while q :
            lenght = len(q)
            level = []
            stack = []
            for i in range(lenght) :
                n = q.pop(0)
                if n :
                    q.append(n.left)
                    q.append(n.right)
                    if flag :
                        stack.append(n.val)
                    else :
                        level.append(n.val)

            if flag :
                while stack :
                    level.append(stack.pop())
            if level :
                result.append(level) 
            flag = not flag 
            
        return result 
