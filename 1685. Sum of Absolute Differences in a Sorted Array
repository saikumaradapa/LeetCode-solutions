# O(n) take the advantage of sorted values 
# consider left and right sum of current number
class Solution:
    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:
        result = []
        tsum,n = sum(nums), len(nums)
        lnum, lsum = 0, 0

        for i in range(n) :
            rsum = tsum-lsum
            rnum = n-lnum
            res = (lnum*nums[i] - lsum) + (rsum - rnum*nums[i] )
            lnum, lsum = lnum+1, lsum+nums[i]
            result.append(res)
        return result

''' time complexity : O(n)
    space complexity : O(1)
'''
########################################################################################################################################################################################################

class Solution:
    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:
        total = sum(nums)

        n = len(nums)
        res = [0] * n
        pre = [0] * n
        post = [0] * n
        for i in range(1,n) :
            pre[i] = pre[i-1] + nums[i-1]
        for i in range(n-2, -1, -1) :
            post[i] = post[i+1] + nums[i+1]

        for i in range(n) :
            res[i] = (nums[i]*i-pre[i]) + (post[i]-(n-i-1)*nums[i])        
        return res
        
''' time complexity : O(n)
    space complexity : O(n)
'''

########################################################################################################################################################################################################

# time O(NÂ²) and TLE 
class Solution:
    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:
        result = []
        for i in range(len(nums)) :
            temp = []
            for j in range(len(nums)) :
                temp.append(abs(nums[i]-nums[j]))
            result.append(sum(temp))
        return result
