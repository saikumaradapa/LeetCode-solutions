class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for i in tokens :
            if i == '+' :
                stack.append(stack.pop() + stack.pop())
            elif i == '-':
                a, b = stack.pop(), stack.pop()
                stack.append(b-a)
            elif i == '*':
                stack.append(stack.pop() * stack.pop())
            elif i == '/':
                a, b = stack.pop(), stack.pop()
                stack.append(int(b/a))
            else :
                stack.append(int(i))
        return stack[0]

        """ time complexity of O(2n) 
            space complexity of O(n) """
            
            
# -----------------------------------------------# -----------------------------------------------# -----------------------------------------------
class Solution:
    def evalRPN(self, tokens: list[str]) -> int:
        numb = []
        # curn = None
        operations = {
            '+': lambda x, y: x+y,
            '-': lambda x, y: x-y,
            '*': lambda x, y: x*y,
            '/': lambda x, y: int(x/y),
        }
        for n in tokens:
            if n in operations.keys():
                y, x = numb.pop(-1), numb.pop(-1)
                curn = operations[n](x, y)
                numb.append(curn)
            else:
                numb.append(int(n))
        return numb[0]
        
        
# -----------------------------------------------# -----------------------------------------------# -----------------------------------------------
class Solution:
    def evalRPN(self, tokens: list[str]) -> int:                #  Ex:  tokens = ["4","13","5","/","+"]
        stack = []
                                                                #      t     operation    stack
        for t in tokens:                                        #    –––––   –––––––––    ––––––––– 
            if t not in '/+-*':                                 #      4                    [4]
                stack.append(int(t))                            #     13                    [4,13]
                                                                #      5                    [4,13,5]
            else:                                               #      /     13 / 5 = 2     [4,2]
                num = stack.pop()                               #      +      4 + 2 = 6     [6]
                if   t == '+': stack[-1]+=  num
                elif t == '-': stack[-1]-=  num
                elif t == '*': stack[-1]*=  num
                else         : stack[-1]= int(stack[-1]/num)    

        return stack[0]
