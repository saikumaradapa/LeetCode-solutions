class Solution:
    def singleNonDuplicate(self, arr: List[int]) -> int:
        n = len(arr)  # Size of the array

        # Edge cases:
        if n == 1 or arr[0] != arr[1]:
            return arr[0]

        if arr[n - 1] != arr[n - 2]:
            return arr[n - 1]

        low = 1
        high = n - 2
        while low <= high:
            mid = (low + high) // 2

            # If arr[mid] is the single element:
            if arr[mid] != arr[mid + 1] and arr[mid] != arr[mid - 1]:
                return arr[mid]

            # We are in the left:
            if (mid % 2 == 1 and arr[mid] == arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]):
                # Eliminate the left half:
                low = mid + 1
            # We are in the right:
            else:
                # Eliminate the right half:
                high = mid - 1

        # Dummy return statement:
        return -1


''' time complexity O(logn)
    space complexity O(1) '''

-----------------------------------------------------------------------------------------------------------------------------------

class Solution:
    def singleNonDuplicate(self, arr: List[int]) -> int:
        n = len(arr)  # Size of the array
        ans = 0
        # XOR all the elements
        for i in range(n):
            ans = ans ^ arr[i]
        return ans

''' Naive Approach(Using XOR) '''
