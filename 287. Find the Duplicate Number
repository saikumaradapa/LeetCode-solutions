class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        nums = sorted(nums)
        for i in range(len(nums)) :
            if nums[i-1] == nums[i] :
                return nums[i]
                
                
                
  class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        myset = set()
        for i in range(len(nums)) :
            if nums[i] in myset :
                return nums[i]
            else : myset.add(nums[i])
            

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        # consider the given list in the form cycle linked list 
        # optimal solution 
        slow, fast = nums[0], nums[nums[0]]
        while slow != fast :
            slow = nums[slow]
            fast = nums[nums[fast]]
        slow = 0
        while slow != fast :
            slow = nums[slow]
            fast = nums[fast]
        return slow
