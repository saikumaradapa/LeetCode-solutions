Problem Link : https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/?envType=daily-question&envId=2024-07-03



class Solution:
    def minDifference(self, nums: List[int]) -> int:
        N = len(nums)
        if N <= 4:
            return 0

        nums.sort()       
        res = float('inf')

        for l in range(4):
            r = N - 4 + l
            res = min(res, nums[r]-nums[l])

        return res

''' time complexity : O(n logn)
    space complexity : O(1)
'''


########################################################################################################################################################################################################################


class Solution:
    def minDifference(self, nums: List[int]) -> int:
        N = len(nums)
        if N <= 4:
            return 0

        min_four = sorted(heapq.nsmallest(4, nums))
        max_four = sorted(heapq.nlargest(4, nums))

        res = float('inf')

        for i in range(4):            
            res = min(res, max_four[i] - min_four[i])

        return res

''' time complexity : O(n)
    space complexity : O(1)
'''
