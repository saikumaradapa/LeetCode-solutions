# Recursion
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
       
       def inorder(root,result) :
           if  root :
                inorder(root.left,result)
                result.append(root.val)
                inorder(root.right,result)
       result = []
       inorder(root,result)
       return result




# Iteration 
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        stack = []
        curr = root
        while curr or stack  :
            while curr :
                stack.append(curr)
                curr = curr.left
            curr = stack.pop()
            result.append(curr.val)
            curr = curr.right
        return result
