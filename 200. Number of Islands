class Solution:
    def dfs(self, grid, visited, r, c, n, m):
        visited[r][c] = 1
        dx = (0, -1, 0, 1, 0)
        for i in range(4):
            adjr = r + dx[i]
            adjc = c + dx[i+1]
            if 0<= adjr <n and 0<= adjc < m and grid[adjr][adjc] == '1' and visited[adjr][adjc] == 0:
                self.dfs(grid, visited, adjr, adjc, n, m)

    def numIslands(self, grid: List[List[str]]) -> int:
        n, m = len(grid), len(grid[0])
        cnt = 0
        visited = [[0] * m for _ in range(n)]

        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1' and visited[i][j] == 0:
                    cnt += 1
                    self.dfs(grid, visited, i, j, n, m)
        return cnt         

''' time complexity : O(n * m)        DFS solution 
    space complexity : O(n * m)
'''


########################################################################################################################################################################


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid :
            return 0
        count = 0
        visited = set()

        def bfs(r, c, visited) :
            q = [(r,c)]
            visited.add((r,c))
            

            while q :
                r, c = q.pop(0)
                dir = [[0,1], [0, -1], [-1, 0], [1, 0]] 
                for dr, dc in dir :
                    row, col = r+dr, c+dc 
                    if row in range(len(grid)) and col in range(len(grid[0])) and grid[row][col] == "1"  and (row, col) not in visited :
                        visited.add((row, col)) 
                        q.append((row, col))

        for i in range(len(grid)) :
            for j in range(len(grid[0])) :
                if grid[i][j] == "1" and (i, j)  not in visited : 
                    count += 1
                    visited.add((i, j))
                    bfs(i, j , visited) 
        return count
