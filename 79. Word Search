class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m,n = len(board), len(board[0])
        l = len(word)
        def helper(pos, i,j, seen) :
            if pos == l :
                return True            
            if ((i,j) in seen) or i<0 or j<0 or i>=m or j>=n or (word[pos] != board[i][j]):
                return False
            
            seen.add((i,j))
            res = (helper(pos+1, i+1,j,seen) or helper(pos+1, i-1,j,seen)or helper(pos+1, i,j+1,seen) or helper(pos+1, i,j-1,seen))
            seen.remove((i,j))
            return res


  
        for i in range(m)  :
            for j in range(n) :               
                if helper(0, i, j,set()) :
                    return True
        return False

''' time complexity : O(n*m* 4^len(word))        
    space complexity : O(n)
'''


#########################################################################################################################################################################################


class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        n, m = len(board), len(board[0])
        visited = [[0] * m for _ in range(n)]

        for i in range(n):
            for j in range(m):
                if board[i][j] == word[0]:
                    if self.search(board, i, j, word, 1, n, m, visited):
                        return True
        return False


    def check(self, n, m, row, col):
        return 0<= row <n and 0<= col < m

    def search(self, board, i, j, word, idx, n, m, visited):
        if idx >= len(word) :
            return True
        
        if visited[i][j] == 1: 
            return False 

        visited[i][j] = 1

        dx = (0, 1, 0, -1, 0)
        for k in range(4):
            row = i + dx[k]
            col = j + dx[k+1]

            if self.check(n, m, row, col) and board[row][col] == word[idx] and visited[row][col] == 0:                
                if self.search(board, row, col, word, idx+1, n, m, visited):
                    return True

        visited[i][j] = 0
        return False        

''' time complexity : O((n*m) * 4 ^ k)                  k - word lenght 
    space complexity : O(n*m)
'''
