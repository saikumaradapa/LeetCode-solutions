"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:

    def dfs(self, node, hasMap):    
        if node in hasMap:
            return hasMap[node]
        
        newNode = Node(node.val)
        hasMap[node] = newNode
        for adj in node.neighbors :            
            newNode.neighbors.append(self.dfs(adj, hasMap))
        return newNode 

    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        hasMap = {}

        return self.dfs(node, hasMap) if node else None 


''' time complexity : O(v+E)
    space complexity : O(n)
'''
