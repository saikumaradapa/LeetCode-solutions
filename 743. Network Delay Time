class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        for u, v, w in times:
            adj[u].append((v, w))

        distance = [float('inf')] * (n + 1)
        distance[k] = 0 
        heap = [(0, k)]        
        

        while heap:
            dist, node = heappop(heap)
            for adjNode in adj[node]:
                curr = dist + adjNode[1]
                if curr < distance[adjNode[0]]:
                    distance[adjNode[0]] = curr
                    heappush(heap, (curr, adjNode[0]))

        
        res = float('-inf')
        for i in range(1, n+1):
            res = max(res, distance[i])
        return res if res != float('inf') else -1

''' time complexity : O(E logV)
    space complexity : O(n)
'''
