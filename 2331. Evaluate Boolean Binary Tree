class Solution:

    def evaluateTree(self, root: Optional[TreeNode]) -> bool:
        if not root.left and not root.right: return root.val 

        return (self.evaluateTree(root.left) | self.evaluateTree(root.right)) if root.val == 2 else (self.evaluateTree(root.left) & self.evaluateTree(root.right))


''' time complexity : O(n)        
    space complexity : O(1)
'''
