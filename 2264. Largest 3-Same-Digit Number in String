class Solution:
    def largestGoodInteger(self, num: str) -> str:
        l,r = 0, 3
        res = -1
        while r <= len(num)  :
            sub = num[l:r]
            if len(set(sub)) == 1 and int(sub) > res: 
                res = int(sub)
            r += 1
            l += 1
        if res == 0 :
            return '000' 
        return str(res) if res != -1 else ''        

''' time complexity : O(n)
    space complexity : O(1)
'''

################################################################################################################################################################################################################################

class Solution:
    def largestGoodInteger(self, num: str) -> str:
        maxi=""
        for i in range(0,len(num)-2):  
            if len(set([num[i],num[i+1],num[i+2]]))==1:
                maxi=max(maxi,num[i])
        return maxi*3
	

''' time complexity : O(n)
    space complexity : O(1)
'''
