class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        n = len(nums)
        if len(nums) == 1: return [nums[0]**2]

        res = []
        i,j = 0,1
        while j<n:
            if abs(nums[i])<abs(nums[j]):
                break 
            i, j = i+1, j+1
        
        while i>=0 and j<n :
            if abs(nums[i])<abs(nums[j]):
                res.append(nums[i]*nums[i])
                i -= 1
            else:
                res.append(nums[j]*nums[j])
                j += 1

        if i>=0:
            while i>=0:
                res.append(nums[i]*nums[i])
                i -= 1
        if j<n:
            while j<n:
                res.append(nums[j]*nums[j])
                j += 1
        return res

''' time complexity : O(n)        
    space complexity : O(n)
'''
