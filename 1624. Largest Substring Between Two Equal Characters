class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        res = -1
        first_index = {}
        for i in range(len(s)) :
            if s[i] in first_index :
                res = max(res, i-first_index[s[i]]-1)
            else :
                first_index[s[i]] = i
        return res

''' time complexity : O(n)        
    space complexity : O(1)
''' 

############################################################################################################################################################################################################################

class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        res = -1
        arr = [[-1,-1] for i in range(26)]
        for i in range(len(s)) :
            ch = s[i]
            if arr[ord(ch)-ord('a')][0] == -1 :
                arr[ord(ch)-ord('a')][0] = i
            else :
                arr[ord(ch)-ord('a')][1] = i
        # print(arr)
        for i in range(26) :
            res = max(res, arr[i][1]-arr[i][0]-1)
        return res
        

''' time complexity : O(n)
    space complexity : O(1)
'''

############################################################################################################################################################################################################################


class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        res = -1
        for i in range(len(s)) :
            for j in range(i+1, len(s)) :
                if s[i] == s[j] :
                    res = max(res, j-i-1)
        return res

''' time complexity : O(n^2)        
    space complexity : O(1)
'''
