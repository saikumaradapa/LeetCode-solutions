class Solution:
    def jump(self, nums: List[int]) -> int:
        l,r = 0, 0
        res = 0
        while r < len(nums)-1  :
            farthest = 0
            for i in range(l, r +1) :
                farthest = max(farthest, i+nums[i])
            l = r + 1
            r = farthest
            res += 1
        return res
''' time complexity : O(n)
    space complexity : O(1)
'''


####################################################################################################################################################################################

class Solution:
    def jump(self, nums: List[int]) -> int:
        dit = dict()
        n = len(nums)
        def helper(pos) :
            if pos == n -1 :
                return 0
            if pos in dit :
                return dit[pos]
            maxPos = min(pos+nums[pos], n-1)
            jumps = None
            minJumps = n

            for nextPos in range(pos+1, maxPos+1) :
                jumps = helper(nextPos)
                minJumps = min(minJumps, jumps+1)
            dit[pos] = minJumps
            # print(dit)
            return dit[pos]
        return helper(0)
''' time complexity : O(n^2)
    space complexity : O(n)
'''
