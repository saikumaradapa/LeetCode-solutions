class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        
        def helper(root, sum) :
            if  not root: return False 
            if ((not root.left) and (not root.right)) :
                return root.val == sum 
            return helper(root.left, sum-root.val) or helper(root.right, sum-root.val) 
        return helper(root, targetSum)

#  the worst-case time complexity of this function is O(n), where n is the number of nodes in the binary tree.
#  space complexity : O(n) and O(logn) for balanced tree
