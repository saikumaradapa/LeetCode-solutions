from collections import Counter 
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        a = Counter(nums1)
        result = []
        for i in nums2 :
            if a[i] > 0 :
                result.append(i)
                a[i] -= 1
        return result
----------------------------------------------------------------------------------------
     
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        i, j = 0,0 
        nums1, nums2 = sorted(nums1), sorted(nums2)
        result = []
        while i < len(nums1) and j < len(nums2) :
            if nums1[i] < nums2[j] :
                i += 1
            elif nums1[i] > nums2[j] :
                j += 1
            else :
                result.append(nums1[i])
                i, j = i+1, j+1
        return result 
     
----------------------------------------------------------------------------------------
        
class Solution:
def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
    #create two dictionaries with the count of two lists
    dict1=Counter(nums1)
    dict2=Counter(nums2)
    list1=[]
    for i in dict1.keys():
        if i in dict2.keys():
            if dict1[i]<=dict2[i]:
                #it is used to append the element into the list how much count is present in both the lists
                for j in range(dict1[i]):
                    list1.append(i)
            else:
                for j in range(dict2[i]):
                    list1.append(i)
    return list1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        cnt1 = [0] * 1001
        cnt2 = [0] * 1001

        for i in nums1:
            cnt1[i] += 1
        
        for i in nums2:
            cnt2[i] += 1
        
        res = []
        for i in range(1001):
            res.extend([i] * min(cnt1[i], cnt2[i]))

        return res

''' time complexity : O(n)        
    space complexity : O(n)  n = 1001
'''
