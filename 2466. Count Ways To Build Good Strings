class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        dp = {0:1}
        mod = 10**9 + 7
        for i in range(1, high+1) :
            dp[i] = dp.get(i-zero, 0) + dp.get(i-one, 0) % mod
        return sum([dp[i] for i in range(low, high+1)]) % mod

        # using dynamic programming, time O(n) and space O(n)






class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        mod = 10**9 + 7
        dp = {}
        def dfs(length) :
            if length > high :
                return 0
            if length in dp :
                return dp[length] % mod
            res = 1 if length >= low else 0
            res += dfs(length+zero) + dfs(length+one)
            dp[length] = res 
            return dp[length] % mod
        return dfs(0)
        # using memorisation technique, time O(n) space O(n)
