class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        left, right = 0, int(sqrt(c))

        while left <= right :
            total = (left*left + right*right)

            if total > c:
                right -= 1
            elif total < c:
                left += 1
            else:
                return True 

        return False 

''' time complexity : O(sqrt(c))        
    space complexity : O(1)
'''

#########################################################################################################################################################################################

class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        left, right = 0, c 

        while left <= right :
            mid = (left**2 + right**2)
            if mid == c:
                return True 
            
            if mid < c:
                left += 1 
            else:
                right -= 1
        return False 

''' time complexity : O(c)
    space complexity : O(1)
'''


#########################################################################################################################################################################################


class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        for i in range(c+1):
            for j in range(c+1):
                if (i**2 + j**2) == c:                    
                    return True 
        return False 

''' time complexity : O(c^2)
    space complexity : O(1)
'''        
