class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = []
        curr = root 
        while curr or stack : 
            if curr :
                res.append(curr.val)
                stack.append(curr.right)
                curr = curr.left 
            else :
                curr = stack.pop()
        return res
''' iterative solution
    time complexity : O(n)
    space complexity : O(n) 

################################################################################################################################################
# recursion solution 
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
       def preorder(root,result) :
           if  root :
                result.append(root.val)
                preorder(root.left,result)
                preorder(root.right,result)
       result = []
       preorder(root,result)
       return result
