class MinStack:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []
        

    def push(self, val: int) -> None:
        self.stack1.append(val)
        ele = min(self.stack2[-1], val) if self.stack2 else val
        self.stack2.append(ele)

    def pop(self) -> None:
        self.stack1.pop()
        self.stack2.pop()

    def top(self) -> int:
        return self.stack1[-1] 

    def getMin(self) -> int:
        return self.stack2[-1]


################################################################################


class MinStack:

    def __init__(self):
        self.stack = []
        self.minStack = [float("inf")]

    def push(self, val: int) -> None:
        self.stack.append(val)
        if val <= self.minStack[-1] :
            self.minStack.append(val)

    def pop(self) -> None:
        p = self.stack.pop()
        if p == self.minStack[-1] :
            self.minStack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.minStack[-1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
