O(log(M * N))
class Solution:
    def searchMatrix(self, mat: List[List[int]], target: int) -> bool:
        n,m = len(mat), len(mat[0])
        l,r = 0, n*m-1
        while l<=r :
            mid = (l+r)//2
            ele = mat[mid//m][mid%m]
            if ele == target :
                return True 
            if ele < target :
                l = mid+1
            else : 
                r = mid-1





O(M + N)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        i, j = 0, len(matrix[0])-1
        while i < len(matrix) and j >= 0 :
            if target == matrix[i][j] :
                return True 
            elif target > matrix[i][j] :
                i += 1
            elif target < matrix[i][j] :
                j -= 1
        return False 





O(M Ã— N)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        temp=[]
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if target == matrix[i][j]: return True
        else:
            return False   
