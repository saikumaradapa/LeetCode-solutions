class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        if not root :
            return 0
        if root.val < low :
            return self.rangeSumBST(root.right, low, high)
        if root.val > high :
            return self.rangeSumBST(root.left, low, high)
        return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)

''' time complexity : O(n)
    space complexity : O(1)
'''

##########################################################################################################################################################################################

class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        res = 0
        def dfs(root) :
            nonlocal res
            if not root :
                return 0
            if low <= root.val <= high :
                res += root.val         
            dfs(root.left)
            dfs(root.right)
        dfs(root)
        return res

''' time complexity : O(n)
    space complexity : O(1)
'''
