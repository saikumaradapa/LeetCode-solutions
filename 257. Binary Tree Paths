class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        res = []
        if not root : return []
        q = [(root, '')]
        
        while q :
            n = len(q)
            for i in range(n) :
                curr,s = q.pop(0)
                s = s+'->'+str(curr.val) if s else str(curr.val)
                if not curr.left and not curr.right :
                    res.append(s)
                if curr.left :
                    q.append((curr.left, s))
                if curr.right :
                    q.append((curr.right, s))
        return res

''' time complexity : O(n)
    space complexitty : O(n) worst and O(logn) best case 
'''
