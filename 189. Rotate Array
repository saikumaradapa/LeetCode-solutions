class Solution:
    def reverse(self, nums, left, right):
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1        

    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        k = k % n 
        self.reverse(nums, 0, n-k-1)
        self.reverse(nums, n-k, n-1)
        self.reverse(nums, 0, n-1)


''' time complexity : O(n)        
    space complexity : O(1)
'''

##########################################################################################################################################################################################

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        k = k%n
        nums.reverse()
        left, right = 0, k-1
        while left<=right :
            nums[left], nums[right] = nums[right], nums[left]
            left, right = left+1, right-1

        left, right = k, n-1
        while left<=right :
            nums[left], nums[right] = nums[right], nums[left]
            left, right = left+1, right-1
        

''' time complexity : O(n)
    space complexity : O(1)
'''
##########################################################################################################################################################################################

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        n = len(nums)
        k = k % n 
        res = [0] * n
        for i in range(n) :
            res[(i+k)%n] = nums[i]
        nums[:] = res[:]

''' time complexity : O(n)
    space complexity : O(n)
'''
