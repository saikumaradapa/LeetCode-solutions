# using loops 
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r  = 0, len(nums)-1 
        
        while l<=r :
            mid = (l+r) // 2
            if nums[mid] == target :
                return mid
            ##  left sorted portion
            if nums[l] <= nums[mid] :
                if target < nums[l] or target > nums[mid] :
                    l = mid+1
                else :
                    r = mid-1
            ##  right sorted 
            else :
                if target < nums[mid] or target > nums[r] :
                    r = mid-1
                else :
                    l = mid+1
        return -1
        ##  time complexity of O(logn)





# using recursion 
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        def search(nums, target, left, right) :
            mid = (left+right)//2
            if left > right :
                return -1
            if nums[mid] == target :
                return mid 
            if nums[left] <= nums[mid] :
                if nums[left] <= target and nums[mid] >= target :
                    return search(nums, target, left, mid)
                else :
                    return search(nums, target, mid+1, right)
            else :
                if nums[mid] <= target and nums[right] >= target :
                    return search(nums, target,  mid, right)
                else :
                    return search(nums, target, left, mid-1)
        return search(nums, target, 0, len(nums)-1)


        # time complexity of O(logn)
        # take modified binary search 
        # take mid then check if nums[mid] is target or not 
        # if noe split the rotated sorted array into two parts where we surly get one sorted and one unsoorted array  
        # if first array is sorted and target in between left and mid then binary search one that part of array else perform search on it's second array
        # this case where 2nd array is sorted if target in between the 2nd array then binary search else search on first array 
        #  continue this steps untill left < right where it is base case 
