Problem Link : https://leetcode.com/problems/making-a-large-island/description/


class DisjointSet:
    def __init__(self, n):
        self.size = [1 for i in range(n)]
        self.parent = [i for i in range(n)]
    
    def findPar(self, node):
        if node == self.parent[node]:
            return node 
        self.parent[node] = self.findPar(self.parent[node])
        return self.parent[node]
    
    def union(self, u, v):
        ulp_u = self.findPar(u)
        ulp_v = self.findPar(v)

        if ulp_u == ulp_v:
            return  
        if self.size[ulp_u] >= self.size[ulp_v]:
            self.parent[ulp_v] = ulp_u
            self.size[ulp_u] += self.size[ulp_v]
        else:
            self.parent[ulp_u] = ulp_v 
            self.size[ulp_v] += self.size[ulp_u]     



class Solution:
    def isValid(self, x, y, n, m):
        return( (0<= x < n) and (0<= y < m))

    def largestIsland(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        ds = DisjointSet(n * m)
        dx = (0, -1, 0, 1)
        dy = (-1, 0, 1, 0)
        ones_present = False 
        

        zeros_list = []


        for u in range(n):
            for v in range(m):
                if grid[u][v] == 1:
                    ones_present = True 
                    for k in range(4):
                        x = u + dx[k]
                        y = v + dy[k] 

                        if self.isValid(x, y, n, m) and grid[x][y]: 
                            currPos = (u * n) + v 
                            adjPos = (x * n) + y 
                            ds.union(currPos, adjPos)
                else:
                    zeros_list.append((u, v))                  
        
        if not zeros_list:
            return n * m
        elif not ones_present:
            return 1

        res = 0
        for u, v in zeros_list:
            adjParents = set()
            for k in range(4):
                x = u + dx[k]
                y = v + dy[k]

                if self.isValid(x, y, n, m) and grid[x][y]:
                    adjPos = (x * n) + y 
                    adjParents.add(ds.findPar(adjPos))
            currSum = 1 + sum([ds.size[parent] for parent in adjParents])
            res = max(res, currSum)

        return res



''' time complexity : O(n * m * 4 * alpha)
    space complexity : O(n * m)
'''
