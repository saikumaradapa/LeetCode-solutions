class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 2: return 0

        res = 0

        for i in range(n-1):
            curr_xor = arr[i]
            for k in range(i+1, n):
                curr_xor ^= arr[k]

                if curr_xor == 0:
                    res += (k-i)
        return res

''' time complexity : O(n ^ 2)
    space complexity : O(1)
'''


######################################################################################################################################################

class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 2: return 0

        res = 0

        for i in range(n-1):
            a = 0
            for j in range(i+1, n):
                a ^= arr[j-1]
                b = 0
                for k in range(j, n):
                    b ^= arr[k]

                    
                    if a == b:
                        res += 1
        return res

''' time complexity : O(n ^ 3)
    space complexity : O(1)
'''

######################################################################################################################################################


class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 2: return 0

        res = 0

        for i in range(n-1):
            for j in range(i+1, n):
                for k in range(j, n):
                    a, b = 0, 0
                    for idx in range(i, j):
                        a ^= arr[idx]
                    for idx in range(j, k+1):
                        b ^= arr[idx]
                    
                    if a == b:
                        res += 1
        return res

''' time complexity : O(n ^ 4)
    space complexity : O(1)
'''
