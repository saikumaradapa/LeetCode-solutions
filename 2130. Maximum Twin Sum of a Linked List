# solution with time O(n) and space O(1)
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        slow, fast = head, head 
        prev = None 
        while fast and fast.next :
            fast = fast.next.next
            #  slow and fast pointer technique to reach middle node along with reversingn first half
            temp = slow.next 
            slow.next = prev
            prev = slow
            slow = temp
        res = 0
        while slow :
            res = max(res, prev.val+slow.val)
            prev = prev.next 
            slow = slow.next
        return res







# Using a list
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        num = 0 
        n = head 
        l = []
        c = 0
        while n :
            c += 1
            l.append(n.val) 
            n = n.next 
        result = 0
        for i in range((c // 2)+1) :
            result = max(result, (l[i] + l[c-i-1]) )
        return result
