class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        s1,s2 = float('inf'), float('inf')
        m1, m2 = float('-inf'), float('-inf')

        for n in nums :
            if n > m1 :
                m2 = m1 
                m1 = n 
            elif n > m2  :
                m2 = n


            if n < s1 :
                s2 = s1 
                s1 = n 
            elif n < s2 :
                s2 = n
        return m1*m2 - s1*s2

''' time complexity : O(n)    
    space complexity : O(1)
'''

###################################################################################################################################################################################################

class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        nums.sort()
        return nums[-1]*nums[-2] - nums[0]*nums[1]

''' time complexity : O(nlogn)    
    space complexity : O(1)
'''
