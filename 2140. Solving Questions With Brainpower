class Solution:
    def mostPoints(self, questions: List[List[int]]) -> int:
        dp = {}
        for i in range(len(questions)-1, -1, -1) :
            dp[i] = max(questions[i][0] + dp.get(i+questions[i][1]+1, 0),
                        dp.get(i+1, 0))
        return dp[0]

    # using dynamic programming time O(n) and space O(n)







class Solution:
    def mostPoints(self, questions: List[List[int]]) -> int:
        def dfs(i) :
            if i >= len(questions) :
                return 0
            if i in dp :
                return dp[i]
            dp[i] = max(dfs(i+1), # skip the current question and move to next one
                        questions[i][0] + dfs(i+1+questions[i][1])) # the current qustion
            return dp[i]
        dp = {}
        return dfs(0)

    # recurrsive approach time O(n) and space O(n)
