class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        dit = {
            "2" : "abc",
            "3" : "def",
            "4" : "ghi",
            "5" : "jkl",
            "6" : "mno",
            "7" : "pqrs",
            "8" : "tuv",
            "9" : "wxyz"
        }
        res = []

        def backtrack(pos, comb) :
            if len(comb) == len(digits) :
                res.append(comb[:])
                return 
            for i in dit[digits[pos]] :
                comb = comb+i
                backtrack(pos+1, comb)
                comb = comb[:-1]

        backtrack(0, "")
        if res[0] :
            return res


''' time complexity O(4^(N))
    space complexity O(N) '''
