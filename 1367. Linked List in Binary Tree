Problem Link : https://leetcode.com/problems/linked-list-in-binary-tree/description/?envType=daily-question&envId=2024-09-07


class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        q = deque()
        self.inorder(root, q, head.val)

        if not q: return False 
        curr = head.next
         
        while True:
            if not curr: return True 
            if not q: return False 
            flag = False

            n = len(q)            
            for _ in range(n):
                node = q.popleft()

                if node.left and node.left.val == curr.val:
                    q.append(node.left)
                    flag = True 
                if node.right and node.right.val == curr.val:
                    q.append(node.right)
                    flag = True 
            if not flag: 
                return False
            curr = curr.next 
        return True             

    def inorder(self, root, q, val):
        if root:
            self.inorder(root.left, q, val)
            if root.val == val:
                q.append(root)
            self.inorder(root.right, q, val)

''' time complexity : O(n)
    space complexity : O(n)
'''
