from collections import deque

class Solution:
    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:
        if depth == 1:
            new_root = TreeNode(val)
            new_root.left = root
            return new_root

        q = deque([(root, 1)])

        while q:
            n = len(q)
            for _ in range(n):
                node, d = q.popleft()
                if d == depth - 1:
                    new_left = TreeNode(val)
                    new_right = TreeNode(val)
                    new_left.left = node.left
                    new_right.right = node.right
                    node.left = new_left
                    node.right = new_right
                
                if node.left:
                    q.append((node.left, d + 1))
                if node.right:
                    q.append((node.right, d + 1))
        
        return root


''' time complexity : O(n)
    space complexity : O(n)
'''
