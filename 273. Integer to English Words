Problem Link : https://leetcode.com/problems/integer-to-english-words/description/?envType=daily-question&envId=2024-08-07


class Solution:
    def numberToWords(self, num: int) -> str:
        if num == 0: return "Zero"
        ones_map = {
            1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten',
            11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty'
                }
        
        tens_map = {
                    20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety', 100: 'Hundred'
                    }
        
        def get_string(n):
            res = []
            Hundreds = n // 100        
            tens = n % 100
            ones = n % 10 
            if Hundreds:
                res.append(ones_map[Hundreds] + " Hundred")
            if tens and tens <= 20:
                res.append(ones_map[tens])
            elif tens:
                res.append(tens_map[(tens // 10)*10])
                if ones:
                    res.append(ones_map[ones])
            return " ".join(res)
    
        prefix = ["", " Thousand", " Million", " Billion"]
        res = []
        i = 0
        while num:
            digit = num % 1000
            s = get_string(digit)
            num = num // 1000 
            if s:
                res.append(s+prefix[i])
            i += 1
        res.reverse()
        return " ".join(res)

''' time complexity : O(log Num)    number of digits
    space complexity : O(1)
'''
