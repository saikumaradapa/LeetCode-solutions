class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        res = 0
        maxl, maxr = [0] * n, [0] * n
        maxl[0], maxr[n-1] = height[0], height[n-1]


        for i in range(1, n):
            maxl[i] = max(maxl[i-1], height[i])
            maxr[n-i-1] = max(maxr[n-i], height[n-i-1])

        for i in range(n):
            res += min(maxl[i], maxr[i]) - height[i]

        return res

''' time complexity : O(n)        
    space complexity : O(n)
'''

##########################################################################################################################################################################

class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        res = 0
        l, r = 0, n-1
        leftMax, rightMax = height[l], height[r]

        while l<r:
            if leftMax <= rightMax:
                l += 1
                leftMax = max(leftMax, height[l])
                res += leftMax - height[l]
            else:
                r -= 1
                rightMax = max(rightMax, height[r])
                res += rightMax - height[r]
        return res

''' time complexity : O(n)        
    space complexity : O(1)
'''
