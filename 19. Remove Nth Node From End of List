class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # Two pointers  solution without finding the lenght of list
        # 1. move right ptr to n positions then move left, right pointers one by one. When you reach the right to None, the left pointer will at before node, which will be deleted 
        
        dummy = ListNode(0,next= head)
        left, right = dummy, head
        while n > 0 and right :
            right = right.next
            n -= 1
        
        while right :
            left, right = left.next, right.next
        left.next = left.next.next
        return dummy.next




##################################################
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        # 1. find the lenght of list 
        # 2. find the before node, which is to be deleted 
        # 3. delete the specified node

        h1 = head
        lenght = 0
        while head :
            lenght += 1
            head = head.next
        count = lenght-k
        head = h1

        if count == 0 :
            return head.next
        while h1 :
            print(count,h1.val)
            if count == 1 : 
                node = h1 
                break 
            h1 = h1.next
            count -= 1
        if node.next :
            node.next = node.next.next
        return head
        
        
