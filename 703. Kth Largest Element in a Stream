class KthLargest:

    # constructor takes (n-k)logn time  
    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.minHeap = nums
        heapq.heapify(self.minHeap) # O(n)
        while len(self.minHeap) > self.k :
            heapq.heappop(self.minHeap) # O(1)
        

    def add(self, val: int) -> int:
        heapq.heappush(self.minHeap, val)  # O(logn)
        if len(self.minHeap) > self.k :
            heapq.heappop(self.minHeap)

        return self.minHeap[0]


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
