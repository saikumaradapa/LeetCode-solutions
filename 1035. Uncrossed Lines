class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        c = [[0 for i in range(len(nums2)+1)] for j in range(len(nums1)+1)]
        for i in range(len(nums1)) :
            for j in range(len(nums2)) :
                if nums1[i] == nums2[j] :
                    c[i+1][j+1] = 1+c[i][j]
                else :
                    c[i+1][j+1] = max(c[i+1][j],c[i][j+1])
        return c[len(nums1)][len(nums2)]
        # using dynamic programming 




class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        def dfs(i, j):
            if i == len(nums1) or j == len(nums2) :
                return 0
            if (i, j) in dit :
                return dit[(i, j)]
            if nums1[i] == nums2[j]:
                dit[(i,j)] = 1+dfs(i+1, j+1)
            else :
                dit[(i, j)] = max(dfs(i+1, j), dfs(i, j+1))
            # print(dit[(i,j)])
            return dit[(i, j)]
        dit = {}
        return dfs(0,0)

""" solution using memorisation technique  reduced time complexity from 2^(n+m) to O(n*m)"""
