class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []
        nums.sort()
        print(nums)
        for i in range(len(nums)-1) :
            if i > 0 and nums[i] == nums[i-1]: 
                continue
            left, right = i+1, n-1
            target = -nums[i]
            while left < right :
                if nums[left]+nums[right] > target:
                    right -= 1
                elif nums[left]+nums[right] < target:
                    left += 1
                else :
                    res.append([nums[i], nums[left], nums[right]])
                    
                    while left < right and nums[left] == nums[left+1] :
                        left += 1
                    while left < right and nums[right] == nums[right-1] :
                        right -= 1
                    left += 1
                    right -= 1
        return res



''' time complexity O(N^2) and space complexity O(N) for result '''




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        N, result = len(nums), []
        for i in range(N):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            target = nums[i]*-1
            s,e = i+1, N-1
            while s<e:
                if nums[s]+nums[e] == target:
                    result.append([nums[i], nums[s], nums[e]])
                    s = s+1
                    while s<e and nums[s] == nums[s-1]:
                        s = s+1
                elif nums[s] + nums[e] < target:
                    s = s+1
                else:
                    e = e-1
        return result
