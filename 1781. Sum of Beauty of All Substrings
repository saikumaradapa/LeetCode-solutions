class Solution:
    def beautySum(self, s: str) -> int:
        res = 0
        for i in range(len(s)):
            freq = [0] * 26
            most, least = 0, float('inf')

            for j in range(i, len(s)):
                char_index = ord(s[j]) - ord('a')
                freq[char_index] += 1
                most = max(most, freq[char_index])
                least = min([x for x in freq if x > 0])

                res += most - least

        return res


''' time complexity : O(n^2) 
    space complexity : O(26)
'''
####################################################################################################################################################################

class Solution:
    def beautySum(self, s: str) -> int:
        ans=0
        for i in range(len(s)):
            #initialise variables
            freq_groups=collections.defaultdict(int)
            char_freq={}
            max_freq,min_freq=1,1
            char_freq[s[i]]=1
            freq_groups[char_freq[s[i]]]=1

            for j in range(i+1,len(s)):
                if s[j] not in char_freq:
                    char_freq[s[j]]=1
                    min_freq=min(min_freq,1)
                    freq_groups[char_freq[s[j]]]+=1
                    ans+=max_freq-min_freq
                    
                else:
                    freq_groups[char_freq[s[j]]]-=1
                    if freq_groups[char_freq[s[j]]]==0 and min_freq==char_freq[s[j]]:
                        min_freq+=1
                    char_freq[s[j]]+=1
                    freq_groups[char_freq[s[j]]]+=1
                    max_freq=max(char_freq[s[j]],max_freq)
                    ans+=max_freq-min_freq
        return ans       
                
        


''' time complexity : O(n^2) 
    space complexity : O(26)
'''
