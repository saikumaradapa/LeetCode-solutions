class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
    # take 1st node as odd and 2nd as even 
    # link all odd indexed node and parallelly even nodes 
    # link even nodes list as end of odd list 
    # return odd node head 
    
        if not head :
            return 
        odd, even, evenhead = head, head.next, head.next

        while even and even.next :
            odd.next = odd.next.next 
            odd = odd.next 

            even.next = even.next.next
            even = even.next 

        odd.next = evenhead 
        return head 
                              
        
        
        
        
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]: 
    # take all odd nodes and even node with help of a index variable i 
    # link odd nodes list and even nodes list
        even_p = ListNode()
        odd_p = ListNode()
        even_head = even_p
        odd_head = odd_p
        h = head
        i =  0
        while h:
            if i % 2 == 0:
                even_p.next = h
                even_p = even_p.next
            else:
                odd_p.next = h
                odd_p = odd_p.next
            i += 1
            h = h.next
        odd_p.next = None
        even_p.next = odd_head.next
        return even_head.next
