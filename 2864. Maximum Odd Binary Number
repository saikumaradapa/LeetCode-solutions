class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        arr = list(s)
        left = 0

        for i in range(len(arr)):
            if arr[i] == '1':
                arr[left], arr[i] = arr[i], arr[left]
                left += 1
        arr[left-1], arr[len(arr)-1] =  arr[len(arr)-1], arr[left-1]
        return ''.join(arr)
            
         
''' time complexity : O(n)        # partition technique from quick sort  
    space complexity : O(n)
'''


##################################################################################################################################################################################################################

class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        n = len(s)
        m = sum([1 for ch in s if ch=='1'])
        return ('1'*(m-1)) + ('0'*(n-m)) + '1'
        
''' time complexity : O(n)        
    space complexity : O(n)
'''
