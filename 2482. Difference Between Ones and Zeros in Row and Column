class Solution:
    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:
        n, m = len(grid), len(grid[0])
        rows = [0]*n  
        cols = [0]*m
        for row in range(n) :
            for col in range(m) :
                if grid[row][col] == 1:
                    rows[row] += 1
                    cols[col] += 1
        
        for row in range(n) :
            for col in range(m) :
                temp = rows[row]+cols[col]-(m-rows[row])-(n-cols[col])
                grid[row][col] = temp
        return grid

''' time complexity : O(n*m)        
    space complexity : O(n+m)
'''

############################################################################################################################################################################################

class Solution:
    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:
        n, m = len(grid), len(grid[0])
        rows = [0]*n  
        cols = [0]*m
        for row in range(n) :
            for col in range(m) :
                if grid[row][col] == 1:
                    rows[row] += 1
                    cols[col] += 1
        res = [[0 for col in range(m)] for row in range(n)]
        for row in range(n) :
            for col in range(m) :
                temp = rows[row]+cols[col]-(m-rows[row])-(n-cols[col])
                res[row][col] = temp
        return res

''' time complexity : O(n*m)        
    space complexity : O(n*m) and without output O(n+m)
'''
