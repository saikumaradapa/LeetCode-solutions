class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists:
            return None 
        
        while len(lists) > 1:
            mergedLists = []

            for i in range(0, len(lists), 2):
                l1 = lists[i]
                l2 = lists[i+1] if (i+1) < len(lists) else None 

                mergedLists.append(self.mergeTwo(l1, l2))
            lists = mergedLists
        
        return lists[0]
    

    

    def mergeTwo(self, a, b):
        curr = dummy = ListNode(-1)

        while a and b:
            if a.val < b.val:
                curr.next = a
                a = a.next 
            else:
                curr.next = b 
                b = b.next 
            curr = curr.next 
        
        if a :
            curr.next = a
        if b:
            curr.next = b 
        
        return dummy.next 

''' time complexity : O(n logk)        
    space complexity : O(n)
'''


########################################################################################################################################################################################################################



class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        curr = dummy = ListNode(-1)

        arr = []

        for node in lists:
            if not node:
                continue 
            curr.next = node
            while node and node.next:
                arr.append(node.val)
                node = node.next 
            
            if node:
                arr.append(node.val)
            curr = node

        arr.sort()
        curr = dummy.next 
        for i in range(len(arr)):
            curr.val = arr[i]
            curr = curr.next 
        
        return dummy.next

''' time complexity : O(n logn)        
    space complexity : O(n)
'''
