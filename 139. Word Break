class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        if s=="" :
            return True
        for word in wordDict :
            if s.startswith(word) :
                if self.wordBreak(s[len(word):], wordDict) :
                    return True
        return False

""" time complexity : O(2^n) TLE 
    space complexity : O(n) due to the maximum depth of the recursion stack, n=len(S)
"""

################################################################################################################################################


class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        lenS =  len(s)
        dp = [True]+[False]*lenS

        for i in range(1,lenS+1) :
            for word in wordDict :
                lenW = len(word)
                if i >= lenW and dp[i-lenW] and s[i-lenW:i]==word  :
                    dp[i] = True 
                if dp[i] == True :
                    break 
        return dp[-1]

"""
   --> bottom-up dynamic programming approach and 
   --> time complexity is O(nmk) or O(n^2 * m), where n is the length of the string s,
         m is the average length of a word in wordDict, and k is the number of words
   -->  space complexity is O(n)
"""
