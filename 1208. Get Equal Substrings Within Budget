class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        diff = [abs(ord(s[i])-ord(t[i])) for i in range(len(s))]

        res = 0
        curr = 0

        l = 0
        for r in range(len(s)):
            curr += diff[r]

            while curr > maxCost:
                curr -= diff[l]
                l += 1
            
            res = max(res, r-l+1)
        return res        

''' time complexity : O(n)        
    space complexity : O(n)
'''


##########################################################################################################################################################################################

class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        res = 0
        curr = 0

        l = 0
        for r in range(len(s)):
            curr += abs(ord(s[r])-ord(t[r]))

            while curr > maxCost:
                curr -= abs(ord(s[l])-ord(t[l]))
                l += 1
            
            res = max(res, r-l+1)
        return res        

''' time complexity : O(n)        
    space complexity : O(1)
'''
