# time O(n^2) and space O(1)
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ''
        lres = 0
        for i in range(len(s)) :
            # for odd palindrome
            l,r = i, i
            while l >= 0 and r < len(s) and s[l]==s[r] :
                if r-l+1 > lres :
                    res = s[l:r+1]
                    lres = r-l+1
                l, r = l-1, r+1
            # for even palindrome 
            l, r = i, i+1
            while l >= 0 and r < len(s) and s[l]==s[r] :
                if r-l+1 > lres :
                    res = s[l:r+1]
                    lres = r-l+1
                l, r = l-1, r+1    
        return res


''' time complexity : O(n^2)
    space complexity : O(1)
'''
