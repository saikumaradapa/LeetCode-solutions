# optimal and with parameters 

class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        self.res = 0
        def helper(curr, curr_min, curr_max) :
            if not curr :
                return 
            self.res = max(self.res, abs(curr.val-curr_min), abs(curr.val-curr_max))
            helper(curr.left, min(curr.val, curr_min), max(curr.val, curr_max))
            helper(curr.right,  min(curr.val, curr_min), max(curr.val, curr_max))
        helper(root, root.val, root.val)
        return self.res

''' time complexity : O(n)        
    space complexity : O(n)
'''

########################################################################################################################################################################
# With optimal and minimum parameters passing 

class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        res = 0
        def dfs(root) :
            nonlocal res 
            
            if not root :
                return (0,0)
            if not root.left and not root.right :
                return (root.val, root.val)
            if root.left and root.right :
                left = dfs(root.left)
                right = dfs(root.right)
                maxV, minV = max(root.val, left[0], right[0]), min(root.val, left[1], right[1])
                res = max(res, abs(root.val-maxV), abs(root.val-minV))
                return (maxV, minV)
            if root.left :
                temp = dfs(root.left)
                res = max(res, abs(root.val-temp[0]), abs(root.val-temp[1]))
                return (max(root.val, temp[0]), min(root.val, temp[1]))
            if root.right :
                temp = dfs(root.right)
                res = max(res, abs(root.val-temp[0]), abs(root.val-temp[1]))
                return (max(root.val, temp[0]), min(root.val, temp[1]))
        dfs(root)
        return res

''' time complexity : O(n)
    space complexity : O(n)
'''

########################################################################################################################################################################
# Brute Force Approach

class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        def findDiff(root1) :
            res = 0
            q = [root1]
            while q :
                n = len(q)
                for i in range(n) :
                    node = q.pop(0)
                    if node :
                        if node.left :                            
                            res = max(res,  abs(root1.val - node.left.val))
                        if node.right :
                            res = max(res,  abs(root1.val - node.right.val))
                        q.append(node.left)
                        q.append(node.right)
            # print(root1.val,"-->",res)
            return res
        
        queue = [root] 
        maxDiff = 0
        while queue :
            l = len(queue)
            for i in range(l) :
                curr = queue.pop(0)
                if curr :
                    maxDiff = max(maxDiff, findDiff(curr))
                    queue.append(curr.left)
                    queue.append(curr.right)
        return maxDiff


''' time complexity : O(n^2)        
    space complexity : O(n)
'''
