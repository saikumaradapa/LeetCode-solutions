class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        
        def helper(root, l, r) :
            if not root :
                return True 
            if (root.val <= l or root.val >= r) :
                return False 
            return (helper(root.left, l, root.val) and helper(root.right, root.val, r))

        return helper(root, -math.inf, math.inf)


        """" time complexity of O(2n) """




class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        list1 = []
        def inorder(root) :
            if root :
                inorder(root.left)
                list1.append(root.val)
                inorder(root.right)
        inorder(root)
        # print(list1)
        max = -math.inf
        for i in list1 :
            if max >= i :
                print(max, i)
                return False 
            max = i
        return True
