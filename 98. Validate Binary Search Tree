class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(root, l, r) :
            if not root :
                return True 
            if l < root.val < r :
                return dfs(root.left, l, min(root.val, r)) and dfs(root.right, max(root.val, l), r)
            return False 
        return dfs(root, float("-inf"), float("inf"))        

''' time complexity : O(n)        
    space complexity : O(n) auxiliary space
'''

########################################################################################################################################################################################

# use property that inorder traversal gives a sorted list with BST

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        list1 = []
        def inorder(root) :
            if root :
                inorder(root.left)
                list1.append(root.val)
                inorder(root.right)
        inorder(root)
        # print(list1)
        max = -math.inf
        for i in list1 :
            if max >= i :
                print(max, i)
                return False 
            max = i
        return True
