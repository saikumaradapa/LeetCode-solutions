class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:
        def getParents(root, ParentSet) :
            q = [root]    
            startNode = None                     
            while q :
                n = len(q)
                for i in range(n) :
                    node = q.pop(0)
                    if node :
                        if node.val == start :
                            startNode = node 
                        if node.left :
                            parentSet[node.left] = node
                            q.append(node.left)
                        if node.right :
                            parentSet[node.right] = node                             
                            q.append(node.right)
            return startNode
        parentSet = dict()
        startNode = getParents(root, parentSet)  
        visited = set()
        visited.add(startNode)
        
        q = [startNode]
        t = 0
        while q :
            n = len(q)
            flag = False 
            for i in range(n) :
                node = q.pop(0)
                if node :
                    if node.left and not node.left in visited :
                        q.append(node.left)
                        visited.add(node.left)
                        flag = True 
                    if node.right and not node.right in visited :
                        q.append(node.right)
                        visited.add(node.right)
                        flag = True 
                    if node in parentSet and parentSet[node] not in visited :
                        q.append(parentSet[node])
                        visited.add(parentSet[node])
                        flag = True 
            if flag :
                t += 1
        return t


''' time complexity : O(n)
    space complexity : O(n)
'''
