class Solution:

    def lessOrEqual(self, nums, goal):
        if goal < 0 :
            return 0

        left, curr = 0, 0
        res = 0
        for right in range(len(nums)):
            curr += nums[right]
            
            while left < right and curr > goal:
                curr -= nums[left]
                left += 1

            if curr <= goal:
                res += right-left+1

        return res

    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        return self.lessOrEqual(nums, goal) - self.lessOrEqual(nums, goal-1)

''' time complexity : O(n)   2 passes solution 
    space complexity : O(1)

    here getting count of sum less or equal to goal is easier than sum so we choosen this solution
'''
