Problem Link : https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/description/?envType=daily-question&envId=2024-07-20

class Solution:
    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:
        ROWS, COLS = len(rowSum), len(colSum)

        res = [[0] * COLS for _ in range(ROWS)]

        for r in range(ROWS):
            res[r][0] = rowSum[r]
        
        for c in range(COLS):
            curr_col_sum = 0
            for r in range(ROWS):
                curr_col_sum += res[r][c] 
            
            r = 0 
            while curr_col_sum > colSum[c]:
                diff = curr_col_sum - colSum[c]
                max_shift = min(res[r][c], diff)

                res[r][c] -= max_shift
                res[r][c+1] += max_shift
                curr_col_sum -= max_shift
                r += 1


        return res


''' time complexity : O(n * m)        Greedy Approach 
    space complexity : O(1)
'''


######################################################################################################################################################################################################################################


class Solution:
    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:
        ROWS, COLS = len(rowSum), len(colSum)
        res = [[0] * COLS for _ in range(ROWS)]

        for r in range(ROWS):
            for c in range(COLS):
                diff = min(rowSum[r], colSum[c])
                res[r][c] = diff 

                rowSum[r] -= diff 
                colSum[c] -= diff 

        return res 

''' time complexity : O(n * m)        Greedy Approach 
    space complexity : O(1)
'''        
