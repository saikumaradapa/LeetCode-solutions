class Solution:
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:
        res = 0
        def check_palindrom(nums):
            is_palindrom = 0
            for i in range(1, 10):
                if nums[i] % 2 == 1 :
                    if is_palindrom == 0 :
                        is_palindrom = 1
                    else :
                        return False 
            return True
        def dfs(root, arr) :
            nonlocal res                
            arr[root.val] += 1
            if not root.left and not root.right :
                if check_palindrom(arr) :
                    res += 1                 
            if root.left :
                dfs(root.left, arr)
            if root.right :
                dfs(root.right, arr)
            arr[root.val] -= 1
            
        dfs(root, [0] * 10)
        return res


''' time complexity : O(n)
    space complexity : O(h)
'''
