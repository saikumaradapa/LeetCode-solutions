class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        idx = 0
        n = len(preorder)
        def dfs(bound) :
            nonlocal idx 
            if idx < n and preorder[idx] < bound :
                root = TreeNode(preorder[idx])
                idx += 1
                root.left = dfs(root.val)
                root.right = dfs(bound)
                return root 
            return None 
        return dfs(float("inf"))

''' time complexity : O(n)                
    space complexity : O(logn) for recursive call stack 
'''

####################################################################################################################################################################################
Construct Binary Search Tree from Preorder and inorder traversal (sort preorder to get inorder)
####################################################################################################################################################################################


class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        root = TreeNode(preorder[0])
        def insert(root, val) :
            if root.val < val :
                if root.right :
                    insert(root.right, val)
                else :
                    root.right = TreeNode(val)
            elif root.val > val :
                if root.left :
                    insert(root.left, val)
                else :
                    root.left = TreeNode(val)
            return root 
        for val in preorder[1:] :
            insert(root, val)
        return root


''' time complexity : O(n logn)
    space complexity : O(1) except auxiliary space
'''

####################################################################################################################################################################################

class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        stack = []
        n = len(preorder)
        root = TreeNode(preorder[0])
        stack.append(root)

        # inserting node one by one 
        for i in range(1, n) :
            # if the value is less than the nodes val then take current value as left 
            if preorder[i] < stack[-1].val :
                stack[-1].left = TreeNode(preorder[i])
                stack.append(stack[-1].left)
            # if the value is grater than the nodes val then take current value as right for the parent node  
            else :
                while stack and preorder[i] > stack[-1].val  :
                    last = stack.pop()
                last.right = TreeNode(preorder[i])
                stack.append(last.right)

        return root 

''' time complexity : O(n)                
    space complexity : O(n) 
'''
