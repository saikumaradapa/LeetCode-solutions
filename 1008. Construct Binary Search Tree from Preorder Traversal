
O(N) time and O(N) space 

class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        stack = []
        n = len(preorder)
        root = TreeNode(preorder[0])
        stack.append(root)

        # inserting node one by one 
        for i in range(1, n) :
            # if the value is less than the nodes val then take current value as left 
            if preorder[i] < stack[-1].val :
                stack[-1].left = TreeNode(preorder[i])
                stack.append(stack[-1].left)
            # if the value is grater than the nodes val then take current value as right for the parent node  
            else :
                while stack and preorder[i] > stack[-1].val  :
                    last = stack.pop()
                last.right = TreeNode(preorder[i])
                stack.append(last.right)

        return root 
