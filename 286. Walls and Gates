Problem Link : https://leetcode.com/problems/walls-and-gates/

from collections import deque
class Solution:
    def islandsAndTreasure(self, grid: List[List[int]]) -> None:
        n, m = len(grid), len(grid[0])
        visited = [[0] * m for i in range(n)]
        q = deque([])
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 0:
                    q.append((i, j))
                    visited[i][j] = 1 
        
        dist = 0 
        direction = [(0, -1), (-1, 0), (0, 1), (1, 0)]
        while q:
            level = len(q)
            for l in range(level):
                r, c = q.popleft()
                grid[r][c] = dist 

                for dr, dc in direction:
                    x, y = r + dr, c + dc 

                    if x < 0 or y < 0 or x == n or y == m or visited[x][y] or grid[x][y] == -1:
                        continue 
                    q.append((x, y))
                    visited[x][y] = 1
            dist += 1



''' time complexity : O(n * m) 
    space complexity : O(n * m) 
''' 
