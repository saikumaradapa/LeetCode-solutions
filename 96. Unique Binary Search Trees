class Solution:
    def numTrees(self, n: int) -> int:
        # numTree[4] = numTree[0] * numTree[3] +
        #            = numTree[1] * numTree[2] +
        #            = numTree[2] * numTree[1] +
        #            = numTree[3] * numTree[0] 

        numTree = [1] * (n+1)

        #  0 nodes = 1 tree 
        #  1 nodes = 1 tree
        for nodes in range(2,n+1) :
            total = 0
            for root in range(1,nodes+1) :
                left = root -1
                right = nodes-root
                total += numTree[left]*numTree[right]
            numTree[nodes] = total
        # print(numTree)
        return numTree[-1]

''' dynamic programming approach
    Time Complexity: O(n^2)
    Space Complexity: O(n) '''

##################################################################################################################################################
class Solution:
    def numTrees(self, n: int) -> int:
        G = [0]*(n+1)
        G[0], G[1] = 1, 1

        for i in range(2, n+1):
            for j in range(1, i+1):
                G[i] += G[j-1] * G[i-j]

        return G[n]
''' pure dynamic programming approach '''
