Problem Link : https://leetcode.com/problems/spiral-matrix-iv/description/?envType=daily-question&envId=2024-09-09


class Solution:
    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:
        curr = head
        res = [[-1] * n for _ in range(m)]

        top, bottom, left, right= 0, m-1, 0, n-1

        while curr and left <= right :

            for i in range(left, right+1):
                if curr:
                    res[top][i] = curr.val 
                    curr = curr.next
            top += 1

            if top <= bottom:
                for i in range(top, bottom+1):
                    if curr:
                        res[i][right] = curr.val 
                        curr = curr.next
            right -= 1
        
            if right >= left:
                for i in range(right, left-1, -1):
                    if curr:
                        res[bottom][i] = curr.val
                        curr = curr.next
            bottom -= 1

            if bottom >= top:
                for i in range(bottom, top-1, -1):
                    if curr:
                        res[i][left] = curr.val
                        curr = curr.next
            left += 1
        return res

''' time complexity : O(m * n)        
    space complexity : O(1)
'''
