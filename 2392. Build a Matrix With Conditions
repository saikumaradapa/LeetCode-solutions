Problem Link : https://leetcode.com/problems/build-a-matrix-with-conditions/description/?envType=daily-question&envId=2024-07-21


class Solution:
    def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:
        row_order = self.topoSort(rowConditions, k)
        col_order = self.topoSort(colConditions, k)

        if not row_order or not col_order:
            return []
        
        res = [[0] * k for _ in range(k)]
        for num in range(1, k+1):
            r, c = row_order.index(num), col_order.index(num)
            res[r][c] = num 
        
        return res

        
    def topoSort(self, edges, k):
        adj = defaultdict(list)

        for u, v in edges:
            adj[u].append(v)
        
        order = []
        visited = [0] * (k + 1)
        path = [0] * (k + 1)
        for node in range(1, k+1):
            if self.dfs(node, visited, path, order, adj):
                return []
        return order[::-1]
        

    def dfs(self, node, visited, path, order, adj):
        if path[node]:
            return True 
        if visited[node]:
            return False 
        
        visited[node] = 1
        path[node] = 1

        for adjNode in adj[node]:            
            if self.dfs(adjNode, visited, path, order, adj):
                return True 
        
        path[node] = 0
        order.append(node)

''' time complexity : O(k ^ 2)
    space complexity : O(k ^ 2)
'''
