Problem Link : https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/description/?envType=daily-question&envId=2024-08-11


class Solution:
    def minDays(self, grid: List[List[int]]) -> int:
        N, M = len(grid), len(grid[0])
        cnt = 0 
        visit = set()

        def dfs(r, c):
            if r < 0 or c < 0 or r == N or c == M or not grid[r][c] or (r, c) in visit:
                return 
            visit.add((r, c))

            dfs(r+1, c)
            dfs(r, c+1)
            dfs(r-1, c)
            dfs(r, c-1)

        for i in range(N):
            for j in range(M):
                if grid[i][j] and (i, j) not in visit:
                    cnt += 1                    
                    dfs(i, j)
        if cnt != 1:
            return 0


        for i in range(N):
            for j in range(M):
                if grid[i][j]:
                    grid[i][j] = 0 
                    cnt = 0 
                    visit = set()

                    for r in range(N):
                        for c in range(M):
                            if grid[r][c] and (r, c) not in visit:
                                cnt += 1
                                dfs(r, c)
                    grid[i][j] = 1
                    if cnt != 1:
                        return 1 


        return 2

''' time complexity : O((n * m) ^ 2)
    space complexity : O(n * m)
'''
