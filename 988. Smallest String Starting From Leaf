class Solution:
    def dfs(self, node, curr):
        if not node:
            return 
        
        curr = chr(ord('a')+node.val) + curr

        if node.left and node.right:
            return min(self.dfs(node.left, curr), 
                        self.dfs(node.right, curr)
                        )
        
        if node.left:
            return self.dfs(node.left, curr)
        
        if node.right:
            return self.dfs(node.right, curr)
        
        return curr

    def smallestFromLeaf(self, root: Optional[TreeNode]) -> str:
        return self.dfs(root, "")


''' time complexity : O(n^2)        DFS solution || string operations considered as O(n) time 
    space complexity : O(n)
'''


########################################################################################################################################################################################################


from collections import deque
class Solution:
    def smallestFromLeaf(self, root: Optional[TreeNode]) -> str:
        s = []
        q = deque([(root, chr(root.val+ord('a')))])
        res = []
        while q:
            n = len(q)
            for _ in range(n):
                node, curr = q.popleft()

                if  (not node.left and not node.right):
                    res.append(curr)
                    continue 

                if node.left:
                    q.append((node.left, chr(node.left.val+ord('a'))+curr))
                if node.right:
                    q.append((node.right, chr(node.right.val+ord('a'))+curr))

        return min(res)

''' time complexity : O(n^2)        BFS solution || string operations considered as O(n) time 
    space complexity : O(n)
'''
