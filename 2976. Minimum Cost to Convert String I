Problem Link : https://leetcode.com/problems/minimum-cost-to-convert-string-i/description/?envType=daily-question&envId=2024-07-27


class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
        n = len(original)
        mat = [[float('inf')] * 26 for _ in range(26)]

        for i in range(len(original)):
            mat[ord(original[i])-ord('a')][ord(changed[i])-ord('a')] = min(cost[i], mat[ord(original[i])-ord('a')][ord(changed[i])-ord('a')])
        
        for i in range(26):
            mat[i][i] = 0
        
        for via in range(26):
            for i in range(26):
                for j in range(26):
                    mat[i][j] = min(mat[i][j], mat[i][via] + mat[via][j])
        
        # print(mat)
        res = 0
        for i in range(len(source)):

            curr = mat[ord(source[i])-ord('a')][ord(target[i])-ord('a')] 
            if curr == float('inf'):
                return -1 
            res += curr 
        
        return res


''' time complexity : O(26 ^ 3) + O(len(original)) + O(len(source))
    space complexity : O(26 * 26)
'''
